import re

def readNumber(line, index):
  number = 0
  while index < len(line) and line[index].isdigit():
    number = number * 10 + int(line[index])
    index += 1
  if index < len(line) and line[index] == '.':
    index += 1
    keta = 0.1
    while index < len(line) and line[index].isdigit():
      number += int(line[index]) * keta
      keta /= 10
      index += 1
  token = {'type': 'NUMBER', 'number': number}
  return token, index


def readPlus(line, index):
  token = {'type': 'PLUS'}
  return token, index + 1


def readMinus(line, index):
  token = {'type': 'MINUS'}
  return token, index + 1

def readTimes(line, index):
  token = {'type': 'TIMES'}
  return token, index + 1


def readDivided(line, index):
  token = {'type': 'DIVIDED'}
  return token, index + 1

def readHajimeKakko(line, index):
  token = {'type': 'HAJIMEKAKKO'}
  return token, index + 1

def readOwariKakko(line, index):
  token = {'type': 'OWARIKAKKO'}
  return token, index + 1
    
def tokenize(line):
  tokens = []
  index = 0
  while index < len(line):
    if line[index].isdigit():
      (token, index) = readNumber(line, index)
    elif line[index] == '+':
      (token, index) = readPlus(line, index)
    elif line[index] == '-':
      (token, index) = readMinus(line, index)
    elif line[index] == '*':
      (token, index) = readTimes(line, index)
    elif line[index] == '/':
      (token, index) = readDivided(line, index)
    elif line[index] == '(':
      (token, index) = readHajimeKakko(line, index)
    elif line[index] == ')':
      (token, index) = readOwariKakko(line, index)
    else:
      print('Invalid character found: ' + line[index])
      exit(1)
    tokens.append(token)
  return tokens


def evaluate(tokens):
  answer = 0
  tokens.insert(0, {'type': 'PLUS'}) # Insert a dummy '+' token
  index = 1
  while index < len(tokens):
    if tokens[index]['type'] == 'NUMBER':
      if tokens[index - 1]['type'] == 'PLUS':
        answer += tokens[index]['number']
      elif tokens[index - 1]['type'] == 'MINUS':
        answer -= tokens[index]['number']
      elif tokens[index - 1]['type'] == 'TIMES':
        answer *= tokens[index]['number']
      elif tokens[index - 1]['type'] == 'DIVIDED':
        answer /= tokens[index]['number'] 
      elif tokens[index - 1]['type'] == 'HAJIMEKAKKO':
        answer = answer
      elif tokens[index - 1]['type'] == 'OWARIKAKKO':
        answer = answer
      else:
        print('Invalid syntax')
        exit(1)
    index += 1
  return answer

def separate(line):#括弧の中から計算
    print("separateに入りました")
    expectedAnswer = eval(line)
    print("本当の答えは"+str(expectedAnswer))
    formula = line
    while formula.find("(") != -1:
        hajime = formula.rfind("(")
        owari = formula.rfind(")")
        
        if hajime<owari:
            print("()より前の数式: "+str(formula[:hajime]))
            print("()より後の数式: " +str(formula[owari+1:]))
            print("()の中身: "+ str(formula[hajime+1:owari]))
            print(str(calculation(formula[hajime+1:owari])))
            formula = formula[:hajime] + str(calculation(formula[hajime+1:owari])) + formula[owari+1:]
            print("()を1つ除いた数式: "+str(formula))
      
    actualAnswer = calculation(formula)
    print(actualAnswer)
    if abs(actualAnswer - expectedAnswer) < 1e-8:
        print("PASS! (%s = %f)" % (line, expectedAnswer))
    else:
        print("FAIL! (%s should be %f but was %f)" % (line, expectedAnswer, actualAnswer))
    print("")


def calculation(line):#掛け算と割り算から計算
  expectedAnswer = eval(line)
  formula = line
  if "*-" in formula:
    sign = formula.find("*-")
    print("signは："+str(sign))
    formula = line[:sign+1] + line[sign+2:]
    print(formula)
    ans = "-" + str(operations(formula))
    
  else:
    formula = re.split('[+-]', line)    #+or-で文字列を分割する
    operator = re.findall('[+-]', line) #+or-の演算子を抜き出す
    finalformula = ''
    ope_index=0
    for element in formula:
        if ope_index < len(operator):
            finalformula = finalformula + str(operations(element)) + operator[ope_index]
        else:
            finalformula = finalformula + str(operations(element))
        ope_index += 1
    ans = operations(finalformula)
  print("括弧の中身の計算結果は"+str(ans))
  return float(ans)
  

def operations(line):#test関数のprint文抜きのもの(計算のみ実施)　
  tokens = tokenize(line)
  actualAnswer = evaluate(tokens)
  return actualAnswer

def runTest():
  print("==== Test started! ====")
  separate("2+3*(3+5)/5*6")
  separate("1.0*(2.1-3)")
  separate("3*(-1)")
  separate("(1+2)*3")
  separate("1+2*3-4")
  separate("1+2*3-4/5")
  print("==== Test finished! ====¥n")

runTest()

while True:
  print('> ', end="")
  line = input() 
  tokens = tokenize(line)
  answer = separate(line)
  print(str(answer))
